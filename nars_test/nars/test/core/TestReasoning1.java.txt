package nars.test;

import java.io.File;
import java.io.IOException;
import java.io.PrintStream;
import java.nio.charset.Charset;
import java.nio.file.Files;
import java.util.List;
import nars.core.NARRun;
import static org.junit.Assert.assertTrue;

import org.junit.Test;

/**
 * Unit Test Reasoning, using input and output files from nal/Examples ;
 * <pre>
 * To create a new test input, add the NARS input as XX-in.txt in nal/Examples ,
 *  run the test suite, and move resulting file in temporary directory
 * /tmp/nars_test/XX-out.txt
 * into nal/Example
 * </pre>
 *
 */
public class TestReasoning1 {

    private static final String INPUT_FILE_SUFFIX
            = "-unedited.txt";
            //"-in.txt";
    
    private static final String OUTPUT_FILE_SUFFIX = "-out.txt";
    
    private final File tmpDir;

    public static void main(String args[]) {
        TestReasoning1 testReasoning = new TestReasoning1();
        if (args.length == 1) {
            testReasoning.checkReasoning(new File(args[0]));
        } else {
            testReasoning.testExamples();
        }
    }

    public TestReasoning1() {
        String tmpDir_ = System.getProperty("java.io.tmpdir");
        tmpDir = new File(tmpDir_, "nars_test");
        tmpDir.mkdir();
        System.out.println("TestReasoning: tests results are in " + tmpDir);
    }

    @Test
    public void testExamples() {
        File testDir = new File("nal/Examples");
        File[] allFiles = testDir.listFiles();
        boolean testPassed = true;
        for (int i = 0; i < allFiles.length; i++) {
            File file = allFiles[i];
            if (file.getName().contains(INPUT_FILE_SUFFIX)) {
                System.out.println("Test file " + file);
                testPassed &= checkReasoning(file);
            }
        }
        assertTrue("compared Results", testPassed);
    }

    /**
     * run reasoning and check results
     */
    private boolean checkReasoning(File file) {
        try {
            NARRun nars = new NARRun();
            File resultFile = new File(tmpDir, file.getName().replace(INPUT_FILE_SUFFIX, OUTPUT_FILE_SUFFIX));
            nars.setPrintStream(new PrintStream(resultFile));
            nars.runInference(new String[]{file.getAbsolutePath()});
            return compareResult(file, resultFile);
        } catch (Exception e) {
            e.printStackTrace();
        }
        return false;
    }

    private boolean compareResult(File file, File resultFile) {
        boolean comparison = true;
        try {
            String referenceFile_ = file.getAbsolutePath().replace(INPUT_FILE_SUFFIX, OUTPUT_FILE_SUFFIX);
            File referenceFile = new File(referenceFile_);
            
            List<String> referenceLines = Files.readAllLines(referenceFile.toPath(),
                    Charset.forName("UTF-8"));

            List<String> actualLines = Files.readAllLines(resultFile.toPath(),
                    Charset.forName("UTF-8"));
            int i = 0;
            for (String referenceLine : referenceLines) {
                if (i < actualLines.size()) {
                    String al = actualLines.get(i);
                    if (!referenceLine.equals(al)) {
                        System.out.println(al);
                        System.out.println("DIFFERS from reference (l "
                                + (i + 1) + "):");
                        System.out.println(referenceLine);
                        comparison = false;
                    }
                } else {
                    System.out.println("Actual result is not long enough: line " + i
                            + " / " + referenceLines.size());
                    comparison = false;
                    break;
                }
                i++;
            }
            System.out.println("Finished comparison for file:" + file
                    + " line " + i);
        } catch (IOException e) {
            //e.printStackTrace();
            System.err.println("No comparison available: " +  file.getAbsolutePath());
            return false;
        }
        return comparison;
    }

}
